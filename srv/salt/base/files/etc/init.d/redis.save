#!/bin/bash
#
# Init file for redis
#
# Originally written by Jason Priebe <jpriebe@cbcnewmedia.com>
#
# chkconfig: - 80 12
# description: A persistent key-value database with network interface
# processname: redis-server
# config: /etc/redis.conf
# pidfile: /var/run/redis/redis

source /etc/init.d/functions

RETVAL=0
USER="redis"
SEP="~>"
PROG="redis-server"
CONFDIR="/etc/redis.d"
PIDDIR="/var/run/redis"
LOCKDIR="/var/lock/subsys/redis"
CONF=""
PIDFILE=""
LOCKFILE=""
FILE=""
FILENAME=""
EXTENSION=""
INSTANCE=""
COUNTER=0
NC="\\033[0m"
YELLOW="\\033[1;33m"
RED="\\033[1;31m"
GREEN="\\033[1;32m"
HOSTNAME=`/bin/hostname`
if [ ! -d $CONFDIR ];then
    mkdir -p $CONFDIR
fi
# if [[ $HOSTNAME == *cluster* ]];then
#     # copy config from s3 so redis can start.
#     /usr/bin/aws s3 cp s3://netflix-redis-config/redis-cluster-a.conf /etc/redis.d/redis-cluster-a.conf  > /dev/null 2>&1
# fi
chown -R $USER:root $CONFDIR

if [ ! -d $LOCKDIR ];then
    mkdir -p $LOCKDIR
fi
chown -R $USER:root $LOCKDIR

if [ ! -d $PIDDIR ];then
    mkdir -p $PIDDIR
fi
chown -R $USER:root $PIDDIR

function issue {
    INSTANCE_NUM=`ls $CONFDIR | grep -v nodes- | wc -l`
    OP=$1
    if [ $2 ];then
        INSTANCE="$2"
        CONF="$CONFDIR/${2}.conf"
        PIDFILE="$PIDDIR/${2%%.*}.pid"
        LOCKFILE="$LOCKDIR/${2%%.*}.lock"
        if [ -f $CONF ];then
            $OP $INSTANCE $CONF $PIDFILE $LOCKFILE
            RETVAL=$?
        else
            printf "\t[${RED} ERROR ${NC}] $SEP [${YELLOW} $INSTANCE ${NC}] $CONF File Not Found\n"
            RETVAL=1
        fi
    else
        if [ $INSTANCE_NUM -gt "0" ]; then
            for i in `find /etc/redis.d/ -type f -not -name "nodes*" | sort`; do
                FILE=$(basename "$i")
                EXTENSION="${FILE##*.}"
                FILENAME="${FILE%.*}"
                let COUNTER+=1
                INSTANCE="$FILENAME"
                CONF="$CONFDIR/$FILE"
                PIDFILE="$PIDDIR/${FILENAME%%.*}.pid"
                LOCKFILE="$LOCKDIR/${FILENAME%%.*}.lock"
                $OP $INSTANCE $CONF $PIDFILE $LOCKFILE
                wait
                let RETVAL+=$?
            done
        else
            if [ -f "/etc/redis.conf" ];then
                let COUNTER+=1
                INSTANCE="Default"
                CONF="/etc/redis.conf"
                PIDFILE="$PIDDIR/redis.pid"
                LOCKFILE="$LOCKDIR/redis.lock"
                $OP $INSTANCE $CONF $PIDFILE $LOCKFILE
                #wait
                let RETVAL+=$?
            else
                printf "\t[${RED} ERROR ${NC}] $SEP /etc/redis.conf Not Found\n"
                RETVAL=1
            fi
        fi
    fi
    return $RETVAL
}

r_start() {
    INSTANCE=$1
    CONF=$2
    PIDFILE=$3
    LOCKFILE=$4
    printf "\t[${YELLOW} $INSTANCE ${NC}] $SEP Starting $PROG"
    runuser -s /bin/bash redis -c "ulimit -S -c 0 >/dev/null 2>&1 ; /sbin/$PROG $CONF"
    sleep 1
    wait
    RETVAL=$?
    if [ $RETVAL -eq "0" ];then
        PORT=`grep "port " $CONF | cut -f2 -d " "`
        PID=`ps -ef | grep "${PORT}" | grep $PROG | grep -v grep | awk '{print \$2}'`
        wait
        echo "$PID" > $PIDFILE
        touch $LOCKFILE
        printf "\t\t[ ${GREEN}OK${NC} ]\n"
    else
        if [ -f $LOCKFILE ];then
            rm -f $LOCKFILE
        fi
        if [ -f $PIDFILE ];then
            rm -f $PIDFILE
        fi
        printf  "\t\t[ ${RED}FAILED${NC} ]\n"
    fi
    return $RETVAL
}

r_stop() {
    INSTANCE=$1
    CONF=$2
    PIDFILE=$3
    LOCKFILE=$4
    if [ -f "$PIDFILE" ]; then
        SIZEOF=`ls -al $PIDFILE | awk '{print $5}'`
        if [ $SIZEOF -gt "1" ];then
            PID=`/bin/cat $PIDFILE`
            printf "\t[${YELLOW} $INSTANCE ${NC}] $SEP Stopping $PROG"
            ALIVE=`ps -ef | grep $PID | grep -v grep | awk '{print $2}'`
            if [ $ALIVE ]; then
                kill $PID
                sleep 1
                wait
                ALIVE=`ps -ef | grep $PID | grep -v grep | awk '{print $2}'`
                if [ $ALIVE ]; then
                    printf "\t\t[ ${RED}FAILED${NC} ]\n"
                    RETVAL=1
                fi
            fi
            if [ $RETVAL -ne "1" ];then
                rm -f /var/lib/redis/temp*rdb
                if [ -f $LOCKIFLE ];then
                    rm -f $LOCKFILE
                fi
                if [ -f $PIDFILE ];then
                    rm -f $PIDFILE
                fi
                rm -f `grep "cluster-config-file" $CONF  | cut -f2 -d " "`
                printf "\t\t[ ${GREEN}OK${NC} ]\n"
                RETVAL=0
            fi
        else
            printf "\t[${RED} ERROR ${NC}] [${YELLOW} $INSTANCE ${NC}] $SEP $PIDFILE is empty\n"
            RETVAL=3
        fi
    else
        printf "\t[${YELLOW} ${INSTANCE} ${NC}] $SEP $PROG not running\n"
        RETVAL=0
    fi
    return $RETVAL
}

r_forcestop(){
    for i in `ps -ef | grep $PROG | grep -v grep | awk '{print $2}'`; do
        printf "${RED} Killing PID ${NC} $i"
        kill -9 $i && wait
        if [ $? == "0" ];then
            printf "\t\t[ ${GREEN}OK${NC} ]\n"
            RETVAL=0
        else
            printf "\t\t[ ${RED}FAILED${NC} ]\n"
            RETVAL=5
        fi
    done
    rm -f $LOCKDIR/*
    rm -f $PIDDIR/*
    rm -f /var/lib/redis/temp*rdb
    return $RETVAL
}

r_status(){
    INSTANCE=$1
    CONF=$2
    PIDFILE=$3
    LOCKFILE=$4
    if [ $1 ];then
        printf "\t[${YELLOW} ${INSTANCE} ${NC}] $SEP "
    fi
    status -p $PIDFILE $PROG
    wait
    if [ $? -eq "0" ];then
        RETVAL=3
    else
        RETVAL=$?
    fi
    return $?
}

case "$1" in
    start)
        issue r_start $2
        ;;
    stop)
        printf "${YELLOW}****${NC} Shutdown may take a while; redis needs to save the entire database\n"
        issue r_stop $2
        ;;
    status)
        issue r_status $2
        ;;
    force-stop)
        r_forcestop
        ;;
    restart)
        printf "${YELLOW}****${NC} Shutdown may take a while; redis needs to save the entire database\n"
        issue r_stop $2
        issue r_start $2
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|force-stop}"
        RETVAL=1
esac
exit $RETVAL
